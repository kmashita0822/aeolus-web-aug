{"version":3,"file":"disaster-alerts-BYji1bjX.js","sources":["../../src/components/DisasterAlerts.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react'\n\ninterface GDACSEvent {\n  eventid: string\n  eventtype: string\n  title: string\n  subtitle?: string\n  eventdate: string\n  datestring: string\n  alertlevel: string\n}\n\ninterface DisasterAlert {\n  id: string\n  type: 'tc' | 'fl' | 'wf' | 'dr' | 'vo' | 'eq' | 'unknown'\n  level: 'green' | 'orange' | 'red'\n  title: string\n  location: string\n  time: string\n  description: string\n  eventId: string\n  originalEvent: GDACSEvent\n}\n\nconst DisasterAlerts: React.FC = () => {\n  const [alerts, setAlerts] = useState<DisasterAlert[]>([])\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState<string | null>(null)\n  const [isExpanded, setIsExpanded] = useState(false)\n\n  // Touch device detection\n  const isTouchDevice = 'ontouchstart' in window\n\n  // API configuration\n  const API_URL = 'https://www.gdacs.org/gdacsapi/api/events/geteventlist/homepagetable'\n  const MAX_RETRIES = 3\n\n  // Convert GDACS event type to internal type\n  const convertEventType = (eventType: string): DisasterAlert['type'] => {\n    const typeMap: Record<string, DisasterAlert['type']> = {\n      'TC': 'tc',\n      'FL': 'fl',\n      'WF': 'wf',\n      'DR': 'dr',\n      'VO': 'vo',\n      'EQ': 'eq'\n    }\n    return typeMap[eventType] || 'unknown'\n  }\n\n  // Convert alert level to internal format\n  const convertAlertLevel = (level: string): DisasterAlert['level'] => {\n    const levelMap: Record<string, DisasterAlert['level']> = {\n      'Green': 'green',\n      'Orange': 'orange',\n      'Red': 'red'\n    }\n    return levelMap[level] || 'green'\n  }\n\n  // Format date string\n  const formatDate = (dateString: string): string => {\n    if (!dateString) return 'Unknown date'\n    \n    try {\n      const date = new Date(dateString)\n      if (isNaN(date.getTime())) return dateString\n      \n      return date.toLocaleDateString('en-US', {\n        month: 'short',\n        day: 'numeric',\n        year: 'numeric'\n      }) + ', ' + date.toLocaleTimeString('en-US', {\n        hour: 'numeric',\n        minute: '2-digit',\n        hour12: true\n      })\n    } catch (error) {\n      console.error('Date formatting error:', error)\n      return dateString\n    }\n  }\n\n  // Escape HTML to prevent XSS\n  const escapeHtml = (text: string): string => {\n    if (typeof text !== 'string') return ''\n    const div = document.createElement('div')\n    div.textContent = text\n    return div.innerHTML\n  }\n\n  // Fetch events from GDACS API with retry logic\n  const fetchEvents = useCallback(async (): Promise<GDACSEvent[]> => {\n    let retryCount = 0\n    \n    while (retryCount < MAX_RETRIES) {\n      try {\n        const controller = new AbortController()\n        const timeoutId = setTimeout(() => controller.abort(), 10000) // 10 second timeout\n        \n        const response = await fetch(API_URL, {\n          signal: controller.signal,\n          headers: {\n            'Accept': 'application/json',\n            'User-Agent': 'DisasterAlerts/1.0',\n            'Cache-Control': 'no-cache'\n          }\n        })\n        \n        clearTimeout(timeoutId)\n        \n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status} ${response.statusText}`)\n        }\n\n        const data = await response.json()\n        \n        if (!data || !Array.isArray(data)) {\n          throw new Error('Invalid data format received from API')\n        }\n\n        // Filter out events without essential data and exclude volcanoes and earthquakes\n        const filteredEvents = data.filter((event: GDACSEvent) => {\n          return event && event.eventtype && event.eventid && \n                 event.eventtype !== 'VO' && event.eventtype !== 'EQ'\n        })\n\n        console.log(`Loaded ${filteredEvents.length} disaster events (excluding volcanoes and earthquakes)`)\n        return filteredEvents\n        \n      } catch (error) {\n        retryCount++\n        console.error(`Fetch attempt ${retryCount} failed:`, error)\n        \n        if (retryCount >= MAX_RETRIES) {\n          // If all retries fail, return empty array instead of throwing\n          console.warn('All API attempts failed, showing empty state')\n          return []\n        }\n        \n        // Wait before retrying (exponential backoff)\n        await new Promise(resolve => setTimeout(resolve, 1000 * retryCount))\n      }\n    }\n    \n    return []\n  }, [])\n\n  // Load alerts from API\n  useEffect(() => {\n    const loadAlerts = async () => {\n      const startTime = performance.now()\n      try {\n        console.log('Loading disaster alerts from GDACS API...')\n        setLoading(true)\n        setError(null)\n        \n        const events = await fetchEvents()\n        \n        const loadTime = performance.now() - startTime\n        console.log(`Successfully loaded ${events.length} events from API in ${loadTime.toFixed(2)}ms`)\n        \n        // Convert GDACS events to our internal format\n        const convertedAlerts: DisasterAlert[] = events.map(event => ({\n          id: event.eventid,\n          type: convertEventType(event.eventtype),\n          level: convertAlertLevel(event.alertlevel),\n          title: event.title || 'No location available',\n          location: event.title || 'Unknown location',\n          time: formatDate(event.eventdate) || event.datestring || 'Unknown time',\n          description: event.subtitle || 'No detailed description available.',\n          eventId: event.eventid,\n          originalEvent: event\n        }))\n        \n        console.log(`Converted ${convertedAlerts.length} alerts to internal format`)\n        console.log('Sample alert:', convertedAlerts[0])\n        setAlerts(convertedAlerts)\n        setLoading(false)\n      } catch (err) {\n        const errorTime = performance.now() - startTime\n        console.error(`Failed to load alerts after ${errorTime.toFixed(2)}ms:`, err)\n        setError('Failed to load disaster alerts. Please try again later.')\n        setLoading(false)\n      }\n    }\n\n    loadAlerts()\n  }, [fetchEvents])\n\n  // Handle keyboard events\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.key === 'Escape') {\n        setIsExpanded(false)\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown)\n    return () => document.removeEventListener('keydown', handleKeyDown)\n  }, [])\n\n  // Handle click outside for touch devices\n  useEffect(() => {\n    if (!isTouchDevice) return\n\n    const handleClickOutside = (e: MouseEvent) => {\n      const target = e.target as Element\n      if (!target.closest('.modal-container')) {\n        setIsExpanded(false)\n      }\n    }\n\n    document.addEventListener('click', handleClickOutside)\n    return () => document.removeEventListener('click', handleClickOutside)\n  }, [isTouchDevice])\n\n  // Debug logging\n  useEffect(() => {\n    console.log('Modal render state:', { isExpanded, isTouchDevice, alertsCount: alerts.length, loading, error })\n  }, [isExpanded, isTouchDevice, alerts.length, loading, error])\n\n  const getTypeLabel = (type: string) => {\n    switch (type) {\n      case 'tc': return 'TROPICAL CYCLONE'\n      case 'fl': return 'FLOOD'\n      case 'wf': return 'WILDFIRE'\n      case 'dr': return 'DROUGHT'\n      case 'vo': return 'VOLCANO'\n      case 'eq': return 'EARTHQUAKE'\n      default: return 'UNKNOWN'\n    }\n  }\n\n  const handleModalClick = () => {\n    if (isTouchDevice) {\n      setIsExpanded(!isExpanded)\n    }\n  }\n\n  const handleModalMouseEnter = () => {\n    if (!isTouchDevice) {\n      setIsExpanded(true)\n    }\n  }\n\n  const handleModalMouseLeave = () => {\n    if (!isTouchDevice) {\n      setIsExpanded(false)\n    }\n  }\n\n  const handleRetry = () => {\n    setError(null)\n    setLoading(true)\n    // Trigger reload by updating a dependency\n    window.location.reload()\n  }\n\n  return (\n    <>\n      <div \n        className={`modal-container ${isExpanded ? (isTouchDevice ? 'touch-active' : 'active') : ''}`} \n        onClick={handleModalClick}\n        onMouseEnter={handleModalMouseEnter}\n        onMouseLeave={handleModalMouseLeave}\n        tabIndex={0} \n        role=\"button\" \n        aria-label=\"Disaster alerts modal - hover or click to expand\" \n        aria-expanded={isExpanded}\n      >\n        {/* PERSISTENT HEADER */}\n        <div className=\"modal-header\" tabIndex={0} role=\"button\" aria-label=\"Modal header - click to expand\">\n          <div className=\"header-content\">\n            <div className=\"status-dot\" aria-hidden=\"true\"></div>\n            <div className=\"header-title\">Disaster Alerts</div>\n          </div>\n          <div className=\"event-count\" aria-live=\"polite\" aria-label=\"Number of active alerts\">\n            {alerts.length}\n          </div>\n        </div>\n\n        {/* CONTENT AREA */}\n        <div className=\"modal-content\" role=\"region\" aria-label=\"Disaster alerts list\">\n          <div className=\"content-area\">\n            {loading ? (\n              <div className=\"loading-container\" aria-live=\"polite\" aria-label=\"Loading disaster alerts\">\n                <div className=\"loading-spinner\" aria-hidden=\"true\"></div>\n                <div>Loading alerts...</div>\n              </div>\n            ) : error ? (\n              <div className=\"error-state\" aria-live=\"polite\" aria-label=\"Error loading disaster alerts\">\n                <div className=\"error-icon\">⚠️</div>\n                <div className=\"error-title\">Failed to Load</div>\n                <div className=\"error-text\">{error}</div>\n                <button className=\"retry-btn\" onClick={handleRetry} tabIndex={0}>\n                  Try Again\n                </button>\n              </div>\n            ) : alerts.length === 0 ? (\n              <div className=\"empty-state\" aria-live=\"polite\" aria-label=\"No disaster alerts\">\n                <div className=\"empty-icon\">🌤️</div>\n                <div className=\"empty-title\">No Active Disasters</div>\n                <div className=\"empty-text\">There are currently no active natural disaster alerts.</div>\n              </div>\n            ) : (\n              <div className=\"events-list\">\n                {alerts.map((alert) => (\n                  <div \n                    key={alert.id} \n                    className=\"event-item\" \n                    role=\"button\" \n                    tabIndex={0}\n                  >\n                    {/* Left side - Main information */}\n                    <div className=\"event-main-info\">\n                      <div className=\"event-name\">{escapeHtml(alert.title)}</div>\n                      <div className=\"event-disaster-type\">{getTypeLabel(alert.type)}</div>\n                    </div>\n                    \n                    {/* Right side - Timestamp */}\n                    <div className=\"event-timestamp\">\n                      {alert.time}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default DisasterAlerts "],"names":["DisasterAlerts","alerts","setAlerts","useState","loading","setLoading","error","setError","isExpanded","setIsExpanded","isTouchDevice","API_URL","MAX_RETRIES","convertEventType","eventType","convertAlertLevel","level","formatDate","dateString","date","escapeHtml","text","div","fetchEvents","useCallback","retryCount","controller","timeoutId","response","data","filteredEvents","event","resolve","useEffect","startTime","events","loadTime","convertedAlerts","err","errorTime","handleKeyDown","e","handleClickOutside","getTypeLabel","type","handleModalClick","handleModalMouseEnter","handleModalMouseLeave","handleRetry","jsx","Fragment","jsxs","alert"],"mappings":"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"}